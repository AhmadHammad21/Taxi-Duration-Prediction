name: CI/CD Pipeline - Lambda + API Gateway

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      action:
        description: 'What action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - test-only
        - train-only
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_DEV: taxi-duration-prediction-dev
  ECR_REPOSITORY_PROD: taxi-duration-prediction-prod
  LAMBDA_FUNCTION_DEV: taxi-prediction-dev
  LAMBDA_FUNCTION_PROD: taxi-prediction-prod
  LAMBDA_ROLE_DEV: taxi-duration-prediction-dev
  LAMBDA_ROLE_PROD: taxi-duration-prediction-prod

jobs:
  # ================================ Code Quality & Testing ================================
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: |
        uv sync
        
    # - name: Run linting
    #   run: |
    #     uv run ruff check src/ tests/
    #     uv run ruff format --check src/ tests/
        
    # - name: Run type checking
    #   run: |
    #     uv run mypy src/
        
    - name: Run security checks
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
        
    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ -v
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  # ================================ Model Training & Validation ================================
  model-training:
    name: Model Training & Validation
    runs-on: ubuntu-latest
    needs: code-quality
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch') &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'deploy' || github.event.inputs.action == 'train-only')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: latest
        
    - name: Install dependencies
      run: |
        uv sync
        
    - name: Download data
      run: |
        uv run python src/main.py --download-only
        
    - name: Train and validate model
      run: |
        uv run python src/main.py --train-only
        
    - name: Model performance validation
      run: |
        uv run python -c "
        import json
        import mlflow
        from src.training.model_history import ModelHistory
        
        # Load best model metadata
        with open('src/artifacts/best_model.json', 'r') as f:
            metadata = json.load(f)
        
        # Check if model meets performance threshold
        mae = metadata.get('test_mean_absolute_error', float('inf'))
        if mae > 5.0:  # Threshold: 5 minutes MAE
            raise ValueError(f'Model performance too poor: MAE = {mae}')
        
        print(f'Model validation passed: MAE = {mae}')
        "
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-artifacts
        path: |
          src/artifacts/
          mlruns/
          mlflow.db

  # ================================ Build & Push Lambda Container ================================
  build-and-push:
    name: Build & Push Lambda Container
    runs-on: ubuntu-latest
    needs: [code-quality, model-training]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.event_name == 'workflow_dispatch') &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'deploy')
    outputs:
      image: ${{ steps.build-push.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download model artifacts
      uses: actions/download-artifact@v4
      with:
        name: model-artifacts
        path: ./
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Determine ECR repository
      id: ecr-repo
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/dev" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "dev" ]]; then
          echo "repository=${{ env.ECR_REPOSITORY_DEV }}" >> $GITHUB_OUTPUT
        else
          echo "repository=${{ env.ECR_REPOSITORY_PROD }}" >> $GITHUB_OUTPUT
        fi
      
    - name: Create ECR repository if not exists
      run: |
        aws ecr describe-repositories --repository-names ${{ steps.ecr-repo.outputs.repository }} || \
        aws ecr create-repository --repository-name ${{ steps.ecr-repo.outputs.repository }}
      
    - name: Build, tag, and push Lambda container to Amazon ECR
      id: build-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        docker build -f Dockerfile.lambda -t $ECR_REGISTRY/${{ steps.ecr-repo.outputs.repository }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ steps.ecr-repo.outputs.repository }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ steps.ecr-repo.outputs.repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ================================ Deploy to Development ================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'deploy') &&
      (github.event.inputs.force_deploy != 'true' || needs.code-quality.result == 'success')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update Lambda function to latest image
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_DEV }} \
          --image-uri ${{ needs.build-and-push.outputs.image }}

    - name: Create Lambda Function URL (if not exists)
      run: |
        set -e
        FUNC_NAME="${{ env.LAMBDA_FUNCTION_DEV }}"
        FUNC_URL=$(aws lambda get-function-url-config --function-name $FUNC_NAME --query 'FunctionUrl' --output text 2>/dev/null || echo "")
        if [ -z "$FUNC_URL" ]; then
          FUNC_URL=$(aws lambda create-function-url-config \
            --function-name $FUNC_NAME \
            --auth-type NONE \
            --cors AllowOrigins='*' \
            --query 'FunctionUrl' --output text)
          echo "Created Function URL: $FUNC_URL"
        else
          echo "Function URL already exists: $FUNC_URL"
        fi
        echo "FUNC_URL=$FUNC_URL" >> $GITHUB_ENV

    - name: Wait for Lambda function to be ready
      run: |
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_DEV }}
        sleep 10
        
    - name: Run smoke tests for development
      run: |
        
        curl -f -X POST ${{ env.FUNC_URL }}api/v1/predict \
          -H "Content-Type: application/json" \
          -d '{"PULocationID": "1", "DOLocationID": "2", "trip_distance": 5.0}' || exit 1
          
    - name: Output development URL
      run: |
        echo "üöÄ Development API deployed successfully!"
        echo "üìç API URL: ${{ env.FUNC_URL }}"
        echo "üîó Prediction Endpoint: ${{ env.FUNC_URL }}api/v1/predict"

  # ================================ Deploy to Production ================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'deploy') &&
      (github.event.inputs.force_deploy != 'true' || needs.code-quality.result == 'success')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update Lambda function to latest image
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_PROD }} \
          --image-uri ${{ needs.build-and-push.outputs.image }}

    - name: Create Lambda Function URL (if not exists)
      run: |
        set -e
        FUNC_NAME="${{ env.LAMBDA_FUNCTION_PROD }}"
        FUNC_URL=$(aws lambda get-function-url-config --function-name $FUNC_NAME --query 'FunctionUrl' --output text 2>/dev/null || echo "")
        if [ -z "$FUNC_URL" ]; then
          FUNC_URL=$(aws lambda create-function-url-config \
            --function-name $FUNC_NAME \
            --auth-type NONE \
            --cors AllowOrigins='*' \
            --query 'FunctionUrl' --output text)
          echo "Created Function URL: $FUNC_URL"
        else
          echo "Function URL already exists: $FUNC_URL"
        fi
        echo "FUNC_URL=$FUNC_URL" >> $GITHUB_ENV
        
    - name: Wait for Lambda function to be ready
      run: |
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_PROD }}
        sleep 10
        
    - name: Run production tests
      run: |
        
        # Test prediction endpoint with load
        for i in {1..10}; do
          curl -f -X POST ${{ env.FUNC_URL }}api/v1/predict \
            -H "Content-Type: application/json" \
            -d '{"PULocationID": 1, "DOLocationID": 2, "trip_distance": 5.0}' || exit 1
        done
        
    - name: Output production URL
      run: |
        echo "üöÄ Production API deployed successfully!"
        echo "üìç API URL: ${{ env.FUNC_URL }}"
        echo "üîó Prediction Endpoint: ${{ env.FUNC_URL }}api/v1/predict"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "‚úÖ Production deployment successful!"
        # Add Slack/email notification here

  # ================================ Security Scan ================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ================================ Performance Testing ================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: |
      (github.ref == 'refs/heads/dev' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')) &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.action == 'deploy')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        pip install locust
        
    - name: Create performance test file
      run: |
        mkdir -p tests/performance
        cat > tests/performance/locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class TaxiPredictionUser(HttpUser):
            wait_time = between(1, 3)

            
            @task(7)
            def predict_trip(self):
                payload = {
                    "PULocationID": 1,
                    "DOLocationID": 2,
                    "trip_distance": 5.0
                }
                self.client.post("/api/v1/predict", json=payload)
        EOF
        
    - name: Run load test
      run: |
        locust -f tests/performance/locustfile.py \
          --host=${{ env.FUNC_URL }} \
          --users=10 \
          --spawn-rate=2 \
          --run-time=60s \
          --headless \
          --html=load-test-report.html
          
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: load-test-report.html 