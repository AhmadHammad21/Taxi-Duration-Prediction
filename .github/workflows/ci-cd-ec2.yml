name: Deploy to EC2

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_PROD_IP }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_DEV_IP }}" >> $GITHUB_ENV
          fi
          
          # For manual dispatch, use the selected environment
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_PROD_IP }}" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "EC2_IP=${{ secrets.EC2_DEV_IP }}" >> $GITHUB_ENV
          fi

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Enable Docker BuildKit
        run: |
          sudo mkdir -p /etc/docker
          echo '{"features": {"buildkit": true}}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Deploy to EC2 (${{ env.ENVIRONMENT }})
        run: |
          echo "üöÄ Deploying to ${{ env.ENVIRONMENT }} environment..."
          echo "üìç Target IP: ${{ env.EC2_IP }}"
          
          ssh -o StrictHostKeyChecking=no ubuntu@${{ env.EC2_IP }} << 'EOF'
            # Install uv if not present
            if ! command -v uv &> /dev/null; then
              echo "uv not found. Installing..."
              curl -LsSf https://astral.sh/uv/install.sh | sh
              export PATH="$HOME/.local/bin:$PATH"
            fi

            # Install docker-buildx if not present
            if ! dpkg -s docker-buildx &> /dev/null; then
              echo "docker-buildx not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker-buildx
            fi

            # Ensure uv is available in PATH
            export PATH="$HOME/.local/bin:$PATH"

            # Set project directory based on environment
            if [[ "${{ env.ENVIRONMENT }}" == "prod" ]]; then
              PROJECT_DIR="Taxi-Duration-Prediction-prod"
            else
              PROJECT_DIR="Taxi-Duration-Prediction-dev"
            fi

            # Go to project directory (clone if needed)
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/AhmadHammad21/Taxi-Duration-Prediction.git "$PROJECT_DIR"
            fi
            cd "$PROJECT_DIR"

            # Checkout appropriate branch
            git fetch origin
            git checkout ${{ github.ref_name }}
            git pull

            # Sync dependencies
            uv sync

            # Enable BuildKit for Docker
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            
            # Stop existing containers
            sudo docker-compose down || true
            
            # Build and run with BuildKit enabled
            sudo -E docker-compose up --build -d
            
            # Show running containers
            echo "‚úÖ Deployment completed. Running containers:"
            sudo docker ps
          EOF

      - name: Deployment Summary
        run: |
          echo "üìä Deployment Summary:"
          echo "‚Ä¢ Environment: ${{ env.ENVIRONMENT }}"
          echo "‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "‚Ä¢ Target IP: ${{ env.EC2_IP }}"
          echo "‚Ä¢ FastAPI URL: http://${{ env.EC2_IP }}:8000"
          echo "‚Ä¢ MLflow URL: http://${{ env.EC2_IP }}:5000"